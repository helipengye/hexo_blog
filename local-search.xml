<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Windows oh-my-posh和clink打造个性化 PowerShell 和 CMD</title>
    <link href="/2025/03/24/winidows/oh-my-posh%E5%AE%89%E8%A3%85/"/>
    <url>/2025/03/24/winidows/oh-my-posh%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Oh My Posh 是一个用于美化 Windows 终端和 PowerShell 的工具。它通过自定义提示符和主题，使终端界面更加美观和个性化，个人最喜欢的还是它的历史记录。以下是如何安装和使用 Oh My Posh 主题的详细步骤</p><p><a href="https://ohmyposh.dev/docs">oh-my-posh官方文档</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h4 id="1、打开-PowerShell-提示符并运行以下命令"><a href="#1、打开-PowerShell-提示符并运行以下命令" class="headerlink" title="1、打开 PowerShell 提示符并运行以下命令"></a>1、打开 PowerShell 提示符并运行以下命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">winget install JanDeDobbeleer.OhMyPosh -s winget<br>或者<br>Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString(&#x27;https://ohmyposh.dev/install.ps1&#x27;))<br></code></pre></td></tr></table></figure><h4 id="2、检查是否存在配置文件"><a href="#2、检查是否存在配置文件" class="headerlink" title="2、检查是否存在配置文件"></a>2、检查是否存在配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Test-path $profile<br></code></pre></td></tr></table></figure><p>创建配置文件（不存在就创建文件）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">notepad $profile<br></code></pre></td></tr></table></figure><p>在文件里输入内容，后关闭PowerShell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">Import-Module PSReadLine<br>Set-PSReadLineOption -PredictionSource History<br></code></pre></td></tr></table></figure><p><span id="jump" style="color:red">保存文件后会在目录：C:\Users\用户\Documents\WindowsPowerShell，下生成Microsoft.PowerShell_profile.ps1文件</span></p><h4 id="3、重新打开-PowerShell-报错解决"><a href="#3、重新打开-PowerShell-报错解决" class="headerlink" title="3、重新打开 PowerShell 报错解决"></a>3、重新打开 PowerShell 报错解决</h4><p>Set-PSReadLineOption : 找不到与参数名称“PredictionSource”匹配的参数</p><ol><li>确保你的 PSReadLine 模块是最新版本。你可以通过以下命令更新 PSReadLine 模块<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">Install-<span class="hljs-keyword">Module</span> -<span class="hljs-keyword">Name</span> PSReadLine -Force<br></code></pre></td></tr></table></figure></li><li>上面安装完成后还是报错，检查 PowerShell 版本<br>如果版本低于 7.2，你需要升级你的 PowerShell。你可以从 <a href="https://github.com/PowerShell/PowerShell">PowerShell GitHub</a> 页面下载最新版本。<figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$PSVersionTable</span>.PSVersion</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="4、字体安装（非必须）"><a href="#4、字体安装（非必须）" class="headerlink" title="4、字体安装（非必须）"></a>4、字体安装（非必须）</h4><p>以管理员身份运行 PowerShell 执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">oh-my-posh font install<br></code></pre></td></tr></table></figure><p>这里选择的是 meslo 字体，安装完后，关闭 PowerShell，以普通身份再运行 PowerShell 输入快捷键</p><blockquote><blockquote><p>CTRL + SHIFT + ,<br>打开一个settings.json，找到profiles-&gt;defaults设置对应字体，保存退出</p></blockquote></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;profiles&quot;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;defaults&quot;</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;font&quot;</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;face&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;MesloLGM Nerd Font&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="5、设置主题（非必须）"><a href="#5、设置主题（非必须）" class="headerlink" title="5、设置主题（非必须）"></a>5、设置主题（非必须）</h4><p>主题文件路径，<a href="https://ohmyposh.dev/docs/themes">主题对照网站</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">start $env:POSH_THEMES_PATH<br></code></pre></td></tr></table></figure><p>打开<a href="#jump">Microsoft.PowerShell_profile.ps1</a>文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">notepad</span> <span class="hljs-variable">$profile</span><br></code></pre></td></tr></table></figure><p>添加主题，这里选择的是<code>bubblesextra.omp.json</code>主题，个人喜好自己修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">oh-my-posh init pwsh --config &quot;$env:POSH_THEMES_PATH\bubblesextra.omp.json&quot; | Invoke-Expression<br></code></pre></td></tr></table></figure><p>到这里 PowerShell 的已设置好了，但是CMD并没有这个效果，继续折腾</p><hr><h4 id="6、Terminal-Icons项目地址（非必须）"><a href="#6、Terminal-Icons项目地址（非必须）" class="headerlink" title="6、Terminal-Icons项目地址（非必须）"></a>6、<a href="https://gitcode.com/gh_mirrors/te/Terminal-Icons/?utm_source=artical_gitcode&index=bottom&type=card&">Terminal-Icons项目地址</a>（非必须）</h4><p>Terminal-Icons 是一个 PowerShell 模块，它可以让你的终端显示带有图标的文件和目录列表。该项目基于Nerd Fonts提供的定制字体，这些字体包含了大量自定义的图形和图标。通过这个模块，你可以使终端看起来更专业，更具个性化。</p><p>先执行，否则执行后面命令会报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Set-PSRepository -Name PSGallery -InstallationPolicy trusted<br></code></pre></td></tr></table></figure><p>终端使用管理员身份打开 PowerShell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Install-Module -Name Terminal-Icons -Repository PSGallery<br></code></pre></td></tr></table></figure><p>打开<a href="#jump">Microsoft.PowerShell_profile.ps1</a>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">notepad $profile<br></code></pre></td></tr></table></figure><p>添加Icons，保存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Import-Module -Name Terminal-Icons<br></code></pre></td></tr></table></figure><p>Terminal-Icons 让终端不再是单调的文字展示，而是转变为视觉上的盛宴。如果你是一个热爱命令行界面的人，那么这个项目绝对值得你尝试。现在就去安装它，给你的终端增添一份色彩吧！</p><hr><h4 id="7、clink安装"><a href="#7、clink安装" class="headerlink" title="7、clink安装"></a>7、clink安装</h4><p>clink 是一款增强 CMD 功能的小工具，支持自动补全、命令历史等功能，极大提升了 CMD 的使用体验。</p><p>7.1. 包管理工具安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">winget install clink #winget安装<br>或者<br>scoop install clink #scoop安装<br></code></pre></td></tr></table></figure><p>7.2 手动安装<br>从<a href="https://chrisant996.github.io/clink/">clink官方网站</a>下载.zip安装文件或者.setup.exe安装文件（推荐前者）</p><p>7.3 安装注意事项<br>如果选择的是.exe安装，记得勾选<font color=red>Autorun when cmd.exe starts</font>和<font color=red>Use enhanced default settings</font>，前者会帮你自动将clinks插入到cmd中，而后者可以帮你进行一些默认的配置，避免自己配置的时候有一些问题。</p><p>7.4 激活 clink</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">clink autorun install -- --quiet<br></code></pre></td></tr></table></figure><p>7.5 启用自动补全</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">clink set autosuggest.enable true<br></code></pre></td></tr></table></figure><p>7.6 配置 oh-my-posh 样式<br>创建 Lua 配置文件<br><code>在 C:\Users\&lt;用户名&gt;\AppData\Local\clink 目录下，新建一个名为 oh-my-posh.lua 的文件。</code></p><p>加载 oh-my-posh 主题<br>在文件中写入以下代码，以将 oh-my-posh 的样式应用到 CMD：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">local themes_path = os.getenv(&quot;POSH_THEMES_PATH&quot;)<br>if themes_path then<br>    local config_path = themes_path:gsub(&quot;\\&quot;, &quot;/&quot;) .. &quot;/bubblesextra.omp.json&quot;<br>    local command = string.format(&#x27;oh-my-posh init cmd --config &quot;%s&quot;&#x27;, config_path)<br>    load(io.popen(command):read(&quot;*a&quot;))()<br>else<br>    print(&quot;环境变量 POSH_THEMES_PATH 未设置&quot;)<br>end<br></code></pre></td></tr></table></figure><p><font color=red>bubblesextra.omp.json</font>是主题，可以自行更换<br>配置完成后，重新打开 CMD，即可看到应用了 oh-my-posh 的自定义提示符样式。</p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>免费搭建个人博客</title>
    <link href="/2025/03/24/%E5%8D%9A%E5%AE%A2/%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/03/24/%E5%8D%9A%E5%AE%A2/%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为一个个人博客，希望这个网站能够具有以下优点：</p><ol><li>最好是免费的，不需要额外购买云服务器</li><li>维护尽量简单，我们只用它发布文章，不需要太复杂的功能</li><li>网络访问流畅，不论是国内用户还是国外用户，都能访问我们的博客</li></ol><cite style="color:#00A2FF;font-style: italic;font-weight: bold;">在综合考虑了上面3点要求后，我们最终选择了使用 Cloudflare+GitHub+Hexo+Fluid 来搭建博客网站。</cite><h4 id="感谢大佬"><a href="#感谢大佬" class="headerlink" title="感谢大佬"></a>感谢大佬</h4><p><a href="https://tyxiaoming.xin/2025/01/21/%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%8D%9A%E5%AE%A2/#Hexo%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">陶渊小明博客</a><br><a href="https://www.youtube.com/watch?v=IeGJFOlClxc">youtube视频</a></p><p>我的博客按大佬写的，给自己留一个备份，大佬写的很详细建议直接看大佬的</p><h1 id="Hexo环境配置"><a href="#Hexo环境配置" class="headerlink" title="Hexo环境配置"></a>Hexo环境配置</h1><p>hexo 是一个快速、简洁，而且功能强大的静态博客框架。我们可以使用 Markdown 编写博客文章，然后 hexo 帮我们把 Markdown 文件渲染成静态 HTML 页面。因此 hexo 非常适合用来搭建技术类博客，以及项目文档和个人网站。</p><h1 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="1. 安装 Node.js"></a>1. 安装 Node.js</h1><p>由于 hexo 是基于 Node.js 的，因此要安装 hexo，需要先安装 Node.js 和 npm，然后通过 npm 来安装 hexo。要安装 Node.js ，可以打开Node.js官网，下载软件然后进行安装就可以了。</p><h1 id="2-安装-Hexo"><a href="#2-安装-Hexo" class="headerlink" title="2. 安装 Hexo"></a>2. 安装 Hexo</h1><p>安装 hexo，需要注意我们这里安装的是 hexo客户端 。安装 hexo 需要使用 npm 命令，但是在国内使用 npm 安装软件，速度很慢。因此我们先执行下面这条命令，给 npm 替换成国内的源，这样安装速度就会快很多了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com <br></code></pre></td></tr></table></figure><p>接着执行下面这条命令，使用 npm 安装 hexo客户端。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>使用 hexo 初始化 blog 文件夹（自定义-可以自己改名字）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">hexo init blog<br></code></pre></td></tr></table></figure><p>这个文件夹，就是我们的博客项目，用来存放我们的全部博客文章。然后进入到文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-built_in">cd</span> blog<br></code></pre></td></tr></table></figure><p>接着执行命令安装依赖包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">npm install<br></code></pre></td></tr></table></figure><p>到这里我们的 hexo 环境配置就基本完成了，下面就可以使用它来写文章和发布文章了！👍👍👍</p><h1 id="3-使用-Hexo-管理博客"><a href="#3-使用-Hexo-管理博客" class="headerlink" title="3. 使用 Hexo 管理博客"></a>3. 使用 Hexo 管理博客</h1><p>为了方便编辑，我们使用 vscode 打开 blog 文件夹。下面来看一下 blog 里面的主要组成部分：</p><ol><li>_config.yml：博客的全局配置文件，网站的名称、描述、作者等，都可以在这里进行设置</li><li>source&#x2F;_post：存放我们全部的文章，而且 hexo 自带了一篇 demo 文章 hello-world</li><li>themes：博客的主题配置文件，hexo 有一个默认主题，但不太好看，后面可以改成漂亮一些的主题<br>上面这3部分，就是我们使用 hexo 写博客时需要重点关注的地方。</li></ol><p>接着我们执行命令，在本地把 hexo 服务跑起来。这样我们就可以，在本地网址的4000端口，预览文章效果。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># windows执行<br>hexo clean ; hexo g ; hexo s<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># linux执行</span><br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s<br></code></pre></td></tr></table></figure><p>打开 <a href="http://localhost:4000/">http://localhost:4000/</a> 这个本地网址，已经可以正常访问了，这里就是博客网页的布局。</p><h1 id="4-将博客托管到-GitHub-Pages"><a href="#4-将博客托管到-GitHub-Pages" class="headerlink" title="4. 将博客托管到 GitHub Pages"></a>4. 将博客托管到 GitHub Pages</h1><p>现在我们这个博客，还只能在本地网址预览。下面我们把博客项目托管到 GitHub 仓库，并且使用 GitHub Pages 来部署博客，让其他人也能访问我们的博客网站</p><h3 id="1-博客项目托管到GitHub"><a href="#1-博客项目托管到GitHub" class="headerlink" title="1. 博客项目托管到GitHub"></a>1. 博客项目托管到GitHub</h3><p>为了方便管理 blog 博客项目，我们下一步把这个项目托管到 GitHub 上。首先在 GitHub 上创建一个项目，项目名可以设置为 我们的GitHub用户名.github.io。</p><h3 id="2-使用-GitHub-Pages-部署博客"><a href="#2-使用-GitHub-Pages-部署博客" class="headerlink" title="2. 使用 GitHub Pages 部署博客"></a>2. 使用 GitHub Pages 部署博客</h3><p>执行完配置命令以后，我们就可以使用 git 来管理博客项目了。接下来我们把 my-blog 项目，部署到 GitHub Pages 上。 这样我们的博客，就不再只是一个本地网站了。其他人也可以通过网络，来访问我们的博客。</p><p>首先在 my-blog 项目的 _config.yml 配置文件中，把 git 服务部署的配置加进去。在 type 配置项这里填上 git，然后分别添加一个 repository 和一个 branch 配置，指定部署博客网站时，所使用的 GitHub 项目和对应的分支。repository 这里填 <a href="mailto:&#103;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#99;&#x6f;&#x6d;">&#103;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#99;&#x6f;&#x6d;</a>:GitHub用户名&#x2F;GitHub仓库名，branch 这里指定 main 分支，然后保存配置。</p><p>最后我们执行 npm install hexo-deployer-git –save 命令，安装 hexo-deployer-git 这个插件，来简化部署到 GitHub Pages 的流程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>这样配置完以后，我们就可以在本地写文章，写完以后通过 <a href="http://localhost:4000/">http://localhost:4000/</a> 预览文章效果并进行修改。修改满意后，就可以部署到 GitHub Pages 这样其他人就能访问我们的博客了。我们来看一下使用流程：</p><p>首先我们使用 hexo new post 文章标题，来创建一篇新文章。这样操作后，hexo 就会在 source&#x2F;_post 下面，给我们生成一个新文件来编辑这篇文章。我们使用上一篇文章，搭建的 免费图床 来简单编辑一下这篇新文章。MarkDown 本地渲染一下，显示正常。然后执行这个三合一命令，把文章发布到 GitHub Pages。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy<br></code></pre></td></tr></table></figure><ul><li>hexo clean：清除缓存，简写 hexo -c</li><li>hexo generate：生成渲染，简写 hexo -g</li><li>hexo deploy：部署到 GitHub Pages，简写 hexo -d</li><li>hexo server：启动本地预览，简写 hexo -s</li></ul><p>发布完成后，打开 <a href="https://github用户名.github.io/">https://github用户名.github.io/</a> 这个网址，就可以访问我们的在线博客了！👌</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建免费高速图床 CLoudFlare R2 +PicGo方案</title>
    <link href="/2025/03/24/%E5%8D%9A%E5%AE%A2/%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
    <url>/2025/03/24/%E5%8D%9A%E5%AE%A2/%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>什么叫图床，图床就是将图片上传到相关服务商或者个人服务器，通过上传文件的网络地址进行远程访问。可以方便快速的将图片插入到文章中，方便后续图片二次使用、迁移、分享。</p><h4 id="本篇介绍CLoudFlare-R2-PicGo-方案"><a href="#本篇介绍CLoudFlare-R2-PicGo-方案" class="headerlink" title="本篇介绍CLoudFlare R2+PicGo 方案"></a>本篇介绍CLoudFlare R2+PicGo 方案</h4><p>CLoudFlare R2 免费用户有10GB&#x2F;月的存储额度（30天内每天储存峰值的平均值），对于小网站基本足够，超额的存储是$0.015&#x2F;GB&#x2F;月</p><ul><li>标准储存：日常存储容量前10GB&#x2F;月免费（30天内每天储存峰值的平均值）</li><li>Daily Class A Transactions Caps：日常B类事务前100万次免费（A类事务包括下载、获取文件）</li><li>Daily Class B Transactions Caps：日常A类事务前1000万次免费（B类事务包括创建存储桶、列举存储桶、列举文件版本、列举Keys）</li></ul><h4 id="需要提前准备的"><a href="#需要提前准备的" class="headerlink" title="需要提前准备的"></a>需要提前准备的</h4><p>要使用 Cloudflare R2 和 PicGo 搭建一个免费图床，我们需要提前准备的东西包括：</p><ol><li>一个提前注册好的 Cloudflare 账号，并添加一个付费计划<ul><li>不必担心扣费，可以选择0元免费计划</li></ul></li><li>一个提前注册好的域名，可以选便宜一些的<ul><li>域名后缀无所谓，只是作为图片网址使用</li><li>如果不想花一年十几块的域名费，也可以去网上找免费的域名使用</li></ul></li></ol><h1 id="搭建图床"><a href="#搭建图床" class="headerlink" title="搭建图床"></a>搭建图床</h1><h3 id="1-Cloudflare-R2-配置"><a href="#1-Cloudflare-R2-配置" class="headerlink" title="1. Cloudflare R2 配置"></a>1. Cloudflare R2 配置</h3><p>打开Cloudflare，选择R2对象存储<br><img src="https://r2.jjyyo.com/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/R2%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8.png" alt="R2对象存储"></p><h3 id="2-创建储存桶"><a href="#2-创建储存桶" class="headerlink" title="2. 创建储存桶"></a>2. 创建储存桶</h3><p><img src="https://r2.jjyyo.com/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%AD%98%E5%82%A8%E6%A1%B6.png" alt="创建一个存储桶"></p><h3 id="3-桶设置"><a href="#3-桶设置" class="headerlink" title="3. 桶设置"></a>3. 桶设置</h3><p>PS：如果域名不托管在CloudFlare，可以单独托管二级\三级域名，只需要给二级域名添加一条NS记录指向原托管即可。</p><pre><code class="hljs">* 选择设置* 选择位置：根据自己位置选择* 添加自定义域，继续* 最好再选择：连接域* R2.dev 子域：允许访问* 之后就能浏览器 https://&lt;自定义域名&gt;/&lt;文件名&gt;访问存储桶里的文件了。</code></pre><p><img src="https://r2.jjyyo.com/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/%E6%A1%B6%E8%AE%BE%E7%BD%AE.png" alt="桶设置"></p><p><img src="https://r2.jjyyo.com/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/%E8%BF%9E%E6%8E%A5%E5%9F%9F.png" alt="连接域"></p><p><img src="https://r2.jjyyo.com/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/%E5%85%81%E8%AE%B8%E8%AE%BF%E9%97%AE.png" alt="允许访问"></p><p><img src="https://r2.jjyyo.com/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/%E5%AD%90%E5%9F%9F%E5%90%8D.png" alt="子域名"></p><h3 id="4-WEB-API设置"><a href="#4-WEB-API设置" class="headerlink" title="4. WEB API设置"></a>4. WEB API设置</h3><h3 id="4-设定缓存规则"><a href="#4-设定缓存规则" class="headerlink" title="4. 设定缓存规则"></a>4. 设定缓存规则</h3><p>缓存规则一般设定两个：浏览器缓存和边缘缓存。<br>浏览器缓存：访问后，所需文件储存在浏览器的本地目录，在一段时间内，再次访问优先访问本地文件<br>边缘缓存：访问后，缓存在最近的CDN存一份，在一段时间内，优先访问CDN中的文件</p><ul><li>进入域名页面-&gt;规则-&gt;页面规则</li><li>部署页面规则<br><img src="https://r2.jjyyo.com/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/%E5%88%9B%E5%BB%BA%E9%A1%B5%E9%9D%A2%E8%A7%84%E5%88%99.png" alt="页面规则"></li></ul><p><img src="https://r2.jjyyo.com/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/%E9%83%A8%E7%BD%B2%E9%A1%B5%E9%9D%A2%E8%A7%84%E5%88%99.png" alt="部署页面规则"></p><h3 id="5-防盗链设置"><a href="#5-防盗链设置" class="headerlink" title="5. 防盗链设置"></a>5. 防盗链设置</h3><p>只能通过指定的网站来访问（防君子不防小人，可以伪造refer信息，照样刷流量）。但是还是有点作用，比如别人爬取文章盗用的时候，图片是无法访问的。</p><pre><code class="hljs">* 安全性-&gt;WAF，创建规则* 部署WAF规则</code></pre><p><img src="https://r2.jjyyo.com/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/%E5%88%9B%E5%BB%BAWAF%E8%A7%84%E5%88%99.png" alt="创建WAF规则"></p><p><img src="https://r2.jjyyo.com/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/%E9%83%A8%E7%BD%B2WAF%E8%A7%84%E5%88%99.png" alt="部署WAF规则"></p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/23/hello-world/"/>
    <url>/2025/03/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
